Implicit members
================

Some member functions are implicitly defined from
other defined members.
Following list contains potentially implicitly defined
members and what other members they require to be implicitly
defnided:

- :code:`T::operator+: (this) -> T`:
    - requires: :code:`T::operator=: (inout this, that) -> void`
    - requires: :code:`T::operator+: (this, that) -> T`
    - :code:`+t` is equivalent to :code:`T() + t`
- :code:`T::operator-: (this) -> T`:
    - requires: :code:`T::operator=: (inout this, that) -> void`
    - requires: :code:`T::operator-: (this, that) -> T`
    - :code:`-t` is equivalent to :code:`T() - t`
- :code:`T::operator++: (inout this) -> T`:
    - requires: :code:`T::operator=: (out this, integer_type) -> void`
    - requires: :code:`T::operator=: (inout this, that) -> void`
    - requires: :code:`T::operator+: (this, that) -> T`
    - :code:`t++` is equivalent to :code:`t + T(1)`
- :code:`T::operator--: (inout this) -> T`:
    - requires: :code:`T::operator=: (out this, integer_type) -> void`
    - requires: :code:`T::operator=: (inout this, that) -> void`
    - requires: :code:`T::operator-: (this, that) -> T`
    - :code:`t--` is equivalent to :code:`t - T(1)`
- :code:`T::operator<: (this, that) -> bool`
    - requires: :code:`T::operator<=>: (this, that) -> signed_interer`
    - :code:`t < tt` is equivalent to :code:`(t <=> tt) < 0`
- :code:`T::operator<=: (this, that) -> bool`
    - requires: :code:`T::operator<=>: (this, that) -> signed_integer`
    - :code:`t <= tt` is equivalent to :code:`(t <=> tt) <= 0`
- :code:`T::operator>: (this, that) -> bool`
    - requires: :code:`T::operator<=>: (this, that) -> signed_integer`
    - :code:`t > tt` is equivalent to :code:`(t <=> tt) > 0`
- :code:`T::operator>=: (this, that) -> bool`
    - requires: :code:`T::operator<=>: (this, that) -> signed_integer`
    - :code:`t >= tt` is equivalent to :code:`(t <=> tt) >= 0`
- :code:`T::operator==: (this, that) -> bool`
    - requires: :code:`T::operator<=>: (this, that) -> signed_integer`
    - :code:`t == tt` is equivalent to :code:`(t <=> tt) == 0`
- :code:`T::operator!=: (this, that) -> bool`
    - requires: :code:`T::operator==: (this, that) -> bool`
    - :code:`t != tt` is equivalent to :code:`!(t == tt)`
- :code:`T::operator+=: (inout this, that) -> void`
    - requires: :code:`T::operator=: (inout this, that) -> void`
    - requires: :code:`T::operator+: (this, that) -> T`
    - :code:`t += tt` is equivalent to :code:`t = t + tt`
- :code:`T::operator-=: (inout this, that) -> void`
    - requires: :code:`T::operator=: (inout this, that) -> void`
    - requires: :code:`T::operator-: (this, that) -> T`
    - :code:`t -= tt` is equivalent to :code:`t = t - tt`
- :code:`T::operator*=: (inout this, that) -> void`
    - requires: :code:`T::operator=: (inout this, that) -> void`
    - requires: :code:`T::operator*: (this, that) -> T`
    - :code:`t *= tt` is equivalent to :code:`t = t * tt`
- :code:`T::operator/=: (inout this, that) -> void`
    - requires: :code:`T::operator=: (inout this, that) -> void`
    - requires: :code:`T::operator/: (this, that) -> T`
    - :code:`t /= tt` is equivalent to :code:`t = t / tt`
- :code:`T::operator%=: (inout this, that) -> void`
    - requires: :code:`T::operator=: (inout this, that) -> void`
    - requires: :code:`T::operator%: (this, that) -> T`
    - :code:`t %= tt` is equivalent to :code:`t = t % tt`
- :code:`T::operator<<=: (inout this, that) -> void`
    - requires: :code:`T::operator=: (inout this, that) -> void`
    - requires: :code:`T::operator<<: (this, that) -> T`
    - :code:`t <<= tt` is equivalent to :code:`t = t << tt`
- :code:`T::operator>>=: (inout this, that) -> void`
    - requires: :code:`T::operator=: (inout this, that) -> void`
    - requires: :code:`T::operator>>: (this, that) -> T`
    - :code:`t >>= tt` is equivalent to :code:`t = t >> tt`
- :code:`T::operator&=: (inout this, that) -> void`
    - requires: :code:`T::operator=: (inout this, that) -> void`
    - requires: :code:`T::operator&: (this, that) -> T`
    - :code:`t &= tt` is equivalent to :code:`t = t & tt`
- :code:`T::operator^=: (inout this, that) -> void`
    - requires: :code:`T::operator=: (inout this, that) -> void`
    - requires: :code:`T::operator^: (this, that) -> T`
    - :code:`t ^= tt` is equivalent to :code:`t = t ^ tt`
- :code:`T::operator|=: (inout this, that) -> void`
    - requires: :code:`T::operator=: (inout this, that) -> void`
    - requires: :code:`T::operator|: (this, that) -> T`
    - :code:`t |= tt` is equivalent to :code:`t = t | tt`

Implicit :code:`operator=`
--------------------------

These are listed seperatly because there is not expression that
they are equivelent to. They are generated by actions that modify
the AST:

- :code:`T::operator=: (inout this, that) -> void`
    - requires: :code:`T::operator=: (out this, that) -> void`
- :code:`T::operator=(out this, move that) -> void`
    - requires: :code:`T::operator=: (out this, that) -> void`
- :code:`T::operator=: (inout this, move that) -> void`
    - requires either: :code:`T::operator=: (inout this, that) -> void`
    - or :code:`T::operator=: (out this, move that) -> void`
    - if both are defined, the first is preferred
- :code:`T::operator: (inout, other_type) -> void`
    - requires: :code:`T::operator: (out, other_type) -> void`
- :code:`T::operator: (move this) -> void`
    - generated if every data member have :code:`operator: (move this) -> void` defined
